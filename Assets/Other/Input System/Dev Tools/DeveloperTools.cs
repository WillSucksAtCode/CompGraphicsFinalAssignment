//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Other/Input System/Dev Tools/DeveloperTools.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @DeveloperTools : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @DeveloperTools()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""DeveloperTools"",
    ""maps"": [
        {
            ""name"": ""General"",
            ""id"": ""96446f51-7965-4bf1-860a-46f983bff9e2"",
            ""actions"": [
                {
                    ""name"": ""Enable Dev Mode Button 1"",
                    ""type"": ""Button"",
                    ""id"": ""1ca4f3a2-b669-4ae0-b672-c816638ccfa8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Enable Dev Mode Button 2"",
                    ""type"": ""Button"",
                    ""id"": ""0036ca15-2e9f-4980-a226-2488fbc87e91"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""54d1130e-5ae4-4e0b-b0af-7d5188d0f5b7"",
                    ""path"": ""<Keyboard>/f12"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Enable Dev Mode Button 1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2275fe68-1b27-4da2-9b3d-5c8323f449d6"",
                    ""path"": ""<Keyboard>/delete"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Enable Dev Mode Button 2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Scene Management"",
            ""id"": ""70b09f08-6ca9-4f16-85b4-a88eaa8c4099"",
            ""actions"": [
                {
                    ""name"": ""Go Back A Scene"",
                    ""type"": ""Button"",
                    ""id"": ""e4f610fa-7cd3-421a-a379-44858c871be6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Go Forward A Scene"",
                    ""type"": ""Button"",
                    ""id"": ""ae8d0e93-9bc9-4498-9459-731e7f66fa6e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Pause Scene"",
                    ""type"": ""Button"",
                    ""id"": ""f660c4b6-a0ba-4be9-823c-e88bde33b9d7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""863ef4d4-b301-4601-985e-a7caf5ac5e81"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Go Back A Scene"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""993780e5-fd3f-4087-8056-0291c62e886a"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Go Forward A Scene"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c39d3687-a816-42c0-ac9f-5735f6700698"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pause Scene"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // General
        m_General = asset.FindActionMap("General", throwIfNotFound: true);
        m_General_EnableDevModeButton1 = m_General.FindAction("Enable Dev Mode Button 1", throwIfNotFound: true);
        m_General_EnableDevModeButton2 = m_General.FindAction("Enable Dev Mode Button 2", throwIfNotFound: true);
        // Scene Management
        m_SceneManagement = asset.FindActionMap("Scene Management", throwIfNotFound: true);
        m_SceneManagement_GoBackAScene = m_SceneManagement.FindAction("Go Back A Scene", throwIfNotFound: true);
        m_SceneManagement_GoForwardAScene = m_SceneManagement.FindAction("Go Forward A Scene", throwIfNotFound: true);
        m_SceneManagement_PauseScene = m_SceneManagement.FindAction("Pause Scene", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // General
    private readonly InputActionMap m_General;
    private IGeneralActions m_GeneralActionsCallbackInterface;
    private readonly InputAction m_General_EnableDevModeButton1;
    private readonly InputAction m_General_EnableDevModeButton2;
    public struct GeneralActions
    {
        private @DeveloperTools m_Wrapper;
        public GeneralActions(@DeveloperTools wrapper) { m_Wrapper = wrapper; }
        public InputAction @EnableDevModeButton1 => m_Wrapper.m_General_EnableDevModeButton1;
        public InputAction @EnableDevModeButton2 => m_Wrapper.m_General_EnableDevModeButton2;
        public InputActionMap Get() { return m_Wrapper.m_General; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GeneralActions set) { return set.Get(); }
        public void SetCallbacks(IGeneralActions instance)
        {
            if (m_Wrapper.m_GeneralActionsCallbackInterface != null)
            {
                @EnableDevModeButton1.started -= m_Wrapper.m_GeneralActionsCallbackInterface.OnEnableDevModeButton1;
                @EnableDevModeButton1.performed -= m_Wrapper.m_GeneralActionsCallbackInterface.OnEnableDevModeButton1;
                @EnableDevModeButton1.canceled -= m_Wrapper.m_GeneralActionsCallbackInterface.OnEnableDevModeButton1;
                @EnableDevModeButton2.started -= m_Wrapper.m_GeneralActionsCallbackInterface.OnEnableDevModeButton2;
                @EnableDevModeButton2.performed -= m_Wrapper.m_GeneralActionsCallbackInterface.OnEnableDevModeButton2;
                @EnableDevModeButton2.canceled -= m_Wrapper.m_GeneralActionsCallbackInterface.OnEnableDevModeButton2;
            }
            m_Wrapper.m_GeneralActionsCallbackInterface = instance;
            if (instance != null)
            {
                @EnableDevModeButton1.started += instance.OnEnableDevModeButton1;
                @EnableDevModeButton1.performed += instance.OnEnableDevModeButton1;
                @EnableDevModeButton1.canceled += instance.OnEnableDevModeButton1;
                @EnableDevModeButton2.started += instance.OnEnableDevModeButton2;
                @EnableDevModeButton2.performed += instance.OnEnableDevModeButton2;
                @EnableDevModeButton2.canceled += instance.OnEnableDevModeButton2;
            }
        }
    }
    public GeneralActions @General => new GeneralActions(this);

    // Scene Management
    private readonly InputActionMap m_SceneManagement;
    private ISceneManagementActions m_SceneManagementActionsCallbackInterface;
    private readonly InputAction m_SceneManagement_GoBackAScene;
    private readonly InputAction m_SceneManagement_GoForwardAScene;
    private readonly InputAction m_SceneManagement_PauseScene;
    public struct SceneManagementActions
    {
        private @DeveloperTools m_Wrapper;
        public SceneManagementActions(@DeveloperTools wrapper) { m_Wrapper = wrapper; }
        public InputAction @GoBackAScene => m_Wrapper.m_SceneManagement_GoBackAScene;
        public InputAction @GoForwardAScene => m_Wrapper.m_SceneManagement_GoForwardAScene;
        public InputAction @PauseScene => m_Wrapper.m_SceneManagement_PauseScene;
        public InputActionMap Get() { return m_Wrapper.m_SceneManagement; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(SceneManagementActions set) { return set.Get(); }
        public void SetCallbacks(ISceneManagementActions instance)
        {
            if (m_Wrapper.m_SceneManagementActionsCallbackInterface != null)
            {
                @GoBackAScene.started -= m_Wrapper.m_SceneManagementActionsCallbackInterface.OnGoBackAScene;
                @GoBackAScene.performed -= m_Wrapper.m_SceneManagementActionsCallbackInterface.OnGoBackAScene;
                @GoBackAScene.canceled -= m_Wrapper.m_SceneManagementActionsCallbackInterface.OnGoBackAScene;
                @GoForwardAScene.started -= m_Wrapper.m_SceneManagementActionsCallbackInterface.OnGoForwardAScene;
                @GoForwardAScene.performed -= m_Wrapper.m_SceneManagementActionsCallbackInterface.OnGoForwardAScene;
                @GoForwardAScene.canceled -= m_Wrapper.m_SceneManagementActionsCallbackInterface.OnGoForwardAScene;
                @PauseScene.started -= m_Wrapper.m_SceneManagementActionsCallbackInterface.OnPauseScene;
                @PauseScene.performed -= m_Wrapper.m_SceneManagementActionsCallbackInterface.OnPauseScene;
                @PauseScene.canceled -= m_Wrapper.m_SceneManagementActionsCallbackInterface.OnPauseScene;
            }
            m_Wrapper.m_SceneManagementActionsCallbackInterface = instance;
            if (instance != null)
            {
                @GoBackAScene.started += instance.OnGoBackAScene;
                @GoBackAScene.performed += instance.OnGoBackAScene;
                @GoBackAScene.canceled += instance.OnGoBackAScene;
                @GoForwardAScene.started += instance.OnGoForwardAScene;
                @GoForwardAScene.performed += instance.OnGoForwardAScene;
                @GoForwardAScene.canceled += instance.OnGoForwardAScene;
                @PauseScene.started += instance.OnPauseScene;
                @PauseScene.performed += instance.OnPauseScene;
                @PauseScene.canceled += instance.OnPauseScene;
            }
        }
    }
    public SceneManagementActions @SceneManagement => new SceneManagementActions(this);
    public interface IGeneralActions
    {
        void OnEnableDevModeButton1(InputAction.CallbackContext context);
        void OnEnableDevModeButton2(InputAction.CallbackContext context);
    }
    public interface ISceneManagementActions
    {
        void OnGoBackAScene(InputAction.CallbackContext context);
        void OnGoForwardAScene(InputAction.CallbackContext context);
        void OnPauseScene(InputAction.CallbackContext context);
    }
}
